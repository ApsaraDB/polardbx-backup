#include<stdio.h>
#include<stdlib.h>
#include"sm4.h"
#include<string.h>

static const uint32_t SBOX24[] = {
    0xD6000000, 0x90000000, 0xE9000000, 0xFE000000, 0xCC000000, 0xE1000000, 0x3D000000, 0xB7000000, 0x16000000, 0xB6000000, 0x14000000, 0xC2000000, 0x28000000, 0xFB000000, 0x2C000000, 0x05000000,
    0x2B000000, 0x67000000, 0x9A000000, 0x76000000, 0x2A000000, 0xBE000000, 0x04000000, 0xC3000000, 0xAA000000, 0x44000000, 0x13000000, 0x26000000, 0x49000000, 0x86000000, 0x06000000, 0x99000000,
    0x9C000000, 0x42000000, 0x50000000, 0xF4000000, 0x91000000, 0xEF000000, 0x98000000, 0x7A000000, 0x33000000, 0x54000000, 0x0B000000, 0x43000000, 0xED000000, 0xCF000000, 0xAC000000, 0x62000000,
    0xE4000000, 0xB3000000, 0x1C000000, 0xA9000000, 0xC9000000, 0x08000000, 0xE8000000, 0x95000000, 0x80000000, 0xDF000000, 0x94000000, 0xFA000000, 0x75000000, 0x8F000000, 0x3F000000, 0xA6000000,
    0x47000000, 0x07000000, 0xA7000000, 0xFC000000, 0xF3000000, 0x73000000, 0x17000000, 0xBA000000, 0x83000000, 0x59000000, 0x3C000000, 0x19000000, 0xE6000000, 0x85000000, 0x4F000000, 0xA8000000,
    0x68000000, 0x6B000000, 0x81000000, 0xB2000000, 0x71000000, 0x64000000, 0xDA000000, 0x8B000000, 0xF8000000, 0xEB000000, 0x0F000000, 0x4B000000, 0x70000000, 0x56000000, 0x9D000000, 0x35000000,
    0x1E000000, 0x24000000, 0x0E000000, 0x5E000000, 0x63000000, 0x58000000, 0xD1000000, 0xA2000000, 0x25000000, 0x22000000, 0x7C000000, 0x3B000000, 0x01000000, 0x21000000, 0x78000000, 0x87000000,
    0xD4000000, 0x00000000, 0x46000000, 0x57000000, 0x9F000000, 0xD3000000, 0x27000000, 0x52000000, 0x4C000000, 0x36000000, 0x02000000, 0xE7000000, 0xA0000000, 0xC4000000, 0xC8000000, 0x9E000000,
    0xEA000000, 0xBF000000, 0x8A000000, 0xD2000000, 0x40000000, 0xC7000000, 0x38000000, 0xB5000000, 0xA3000000, 0xF7000000, 0xF2000000, 0xCE000000, 0xF9000000, 0x61000000, 0x15000000, 0xA1000000,
    0xE0000000, 0xAE000000, 0x5D000000, 0xA4000000, 0x9B000000, 0x34000000, 0x1A000000, 0x55000000, 0xAD000000, 0x93000000, 0x32000000, 0x30000000, 0xF5000000, 0x8C000000, 0xB1000000, 0xE3000000,
    0x1D000000, 0xF6000000, 0xE2000000, 0x2E000000, 0x82000000, 0x66000000, 0xCA000000, 0x60000000, 0xC0000000, 0x29000000, 0x23000000, 0xAB000000, 0x0D000000, 0x53000000, 0x4E000000, 0x6F000000,
    0xD5000000, 0xDB000000, 0x37000000, 0x45000000, 0xDE000000, 0xFD000000, 0x8E000000, 0x2F000000, 0x03000000, 0xFF000000, 0x6A000000, 0x72000000, 0x6D000000, 0x6C000000, 0x5B000000, 0x51000000,
    0x8D000000, 0x1B000000, 0xAF000000, 0x92000000, 0xBB000000, 0xDD000000, 0xBC000000, 0x7F000000, 0x11000000, 0xD9000000, 0x5C000000, 0x41000000, 0x1F000000, 0x10000000, 0x5A000000, 0xD8000000,
    0x0A000000, 0xC1000000, 0x31000000, 0x88000000, 0xA5000000, 0xCD000000, 0x7B000000, 0xBD000000, 0x2D000000, 0x74000000, 0xD0000000, 0x12000000, 0xB8000000, 0xE5000000, 0xB4000000, 0xB0000000,
    0x89000000, 0x69000000, 0x97000000, 0x4A000000, 0x0C000000, 0x96000000, 0x77000000, 0x7E000000, 0x65000000, 0xB9000000, 0xF1000000, 0x09000000, 0xC5000000, 0x6E000000, 0xC6000000, 0x84000000,
    0x18000000, 0xF0000000, 0x7D000000, 0xEC000000, 0x3A000000, 0xDC000000, 0x4D000000, 0x20000000, 0x79000000, 0xEE000000, 0x5F000000, 0x3E000000, 0xD7000000, 0xCB000000, 0x39000000, 0x48000000
};

static const uint32_t SBOX16[] = {
    0x00D60000, 0x00900000, 0x00E90000, 0x00FE0000, 0x00CC0000, 0x00E10000, 0x003D0000, 0x00B70000, 0x00160000, 0x00B60000, 0x00140000, 0x00C20000, 0x00280000, 0x00FB0000, 0x002C0000, 0x00050000,
    0x002B0000, 0x00670000, 0x009A0000, 0x00760000, 0x002A0000, 0x00BE0000, 0x00040000, 0x00C30000, 0x00AA0000, 0x00440000, 0x00130000, 0x00260000, 0x00490000, 0x00860000, 0x00060000, 0x00990000,
    0x009C0000, 0x00420000, 0x00500000, 0x00F40000, 0x00910000, 0x00EF0000, 0x00980000, 0x007A0000, 0x00330000, 0x00540000, 0x000B0000, 0x00430000, 0x00ED0000, 0x00CF0000, 0x00AC0000, 0x00620000,
    0x00E40000, 0x00B30000, 0x001C0000, 0x00A90000, 0x00C90000, 0x00080000, 0x00E80000, 0x00950000, 0x00800000, 0x00DF0000, 0x00940000, 0x00FA0000, 0x00750000, 0x008F0000, 0x003F0000, 0x00A60000,
    0x00470000, 0x00070000, 0x00A70000, 0x00FC0000, 0x00F30000, 0x00730000, 0x00170000, 0x00BA0000, 0x00830000, 0x00590000, 0x003C0000, 0x00190000, 0x00E60000, 0x00850000, 0x004F0000, 0x00A80000,
    0x00680000, 0x006B0000, 0x00810000, 0x00B20000, 0x00710000, 0x00640000, 0x00DA0000, 0x008B0000, 0x00F80000, 0x00EB0000, 0x000F0000, 0x004B0000, 0x00700000, 0x00560000, 0x009D0000, 0x00350000,
    0x001E0000, 0x00240000, 0x000E0000, 0x005E0000, 0x00630000, 0x00580000, 0x00D10000, 0x00A20000, 0x00250000, 0x00220000, 0x007C0000, 0x003B0000, 0x00010000, 0x00210000, 0x00780000, 0x00870000,
    0x00D40000, 0x00000000, 0x00460000, 0x00570000, 0x009F0000, 0x00D30000, 0x00270000, 0x00520000, 0x004C0000, 0x00360000, 0x00020000, 0x00E70000, 0x00A00000, 0x00C40000, 0x00C80000, 0x009E0000,
    0x00EA0000, 0x00BF0000, 0x008A0000, 0x00D20000, 0x00400000, 0x00C70000, 0x00380000, 0x00B50000, 0x00A30000, 0x00F70000, 0x00F20000, 0x00CE0000, 0x00F90000, 0x00610000, 0x00150000, 0x00A10000,
    0x00E00000, 0x00AE0000, 0x005D0000, 0x00A40000, 0x009B0000, 0x00340000, 0x001A0000, 0x00550000, 0x00AD0000, 0x00930000, 0x00320000, 0x00300000, 0x00F50000, 0x008C0000, 0x00B10000, 0x00E30000,
    0x001D0000, 0x00F60000, 0x00E20000, 0x002E0000, 0x00820000, 0x00660000, 0x00CA0000, 0x00600000, 0x00C00000, 0x00290000, 0x00230000, 0x00AB0000, 0x000D0000, 0x00530000, 0x004E0000, 0x006F0000,
    0x00D50000, 0x00DB0000, 0x00370000, 0x00450000, 0x00DE0000, 0x00FD0000, 0x008E0000, 0x002F0000, 0x00030000, 0x00FF0000, 0x006A0000, 0x00720000, 0x006D0000, 0x006C0000, 0x005B0000, 0x00510000,
    0x008D0000, 0x001B0000, 0x00AF0000, 0x00920000, 0x00BB0000, 0x00DD0000, 0x00BC0000, 0x007F0000, 0x00110000, 0x00D90000, 0x005C0000, 0x00410000, 0x001F0000, 0x00100000, 0x005A0000, 0x00D80000,
    0x000A0000, 0x00C10000, 0x00310000, 0x00880000, 0x00A50000, 0x00CD0000, 0x007B0000, 0x00BD0000, 0x002D0000, 0x00740000, 0x00D00000, 0x00120000, 0x00B80000, 0x00E50000, 0x00B40000, 0x00B00000,
    0x00890000, 0x00690000, 0x00970000, 0x004A0000, 0x000C0000, 0x00960000, 0x00770000, 0x007E0000, 0x00650000, 0x00B90000, 0x00F10000, 0x00090000, 0x00C50000, 0x006E0000, 0x00C60000, 0x00840000,
    0x00180000, 0x00F00000, 0x007D0000, 0x00EC0000, 0x003A0000, 0x00DC0000, 0x004D0000, 0x00200000, 0x00790000, 0x00EE0000, 0x005F0000, 0x003E0000, 0x00D70000, 0x00CB0000, 0x00390000, 0x00480000
};

static const uint32_t SBOX08[] = {
    0x0000D600, 0x00009000, 0x0000E900, 0x0000FE00, 0x0000CC00, 0x0000E100, 0x00003D00, 0x0000B700, 0x00001600, 0x0000B600, 0x00001400, 0x0000C200, 0x00002800, 0x0000FB00, 0x00002C00, 0x00000500,
    0x00002B00, 0x00006700, 0x00009A00, 0x00007600, 0x00002A00, 0x0000BE00, 0x00000400, 0x0000C300, 0x0000AA00, 0x00004400, 0x00001300, 0x00002600, 0x00004900, 0x00008600, 0x00000600, 0x00009900,
    0x00009C00, 0x00004200, 0x00005000, 0x0000F400, 0x00009100, 0x0000EF00, 0x00009800, 0x00007A00, 0x00003300, 0x00005400, 0x00000B00, 0x00004300, 0x0000ED00, 0x0000CF00, 0x0000AC00, 0x00006200,
    0x0000E400, 0x0000B300, 0x00001C00, 0x0000A900, 0x0000C900, 0x00000800, 0x0000E800, 0x00009500, 0x00008000, 0x0000DF00, 0x00009400, 0x0000FA00, 0x00007500, 0x00008F00, 0x00003F00, 0x0000A600,
    0x00004700, 0x00000700, 0x0000A700, 0x0000FC00, 0x0000F300, 0x00007300, 0x00001700, 0x0000BA00, 0x00008300, 0x00005900, 0x00003C00, 0x00001900, 0x0000E600, 0x00008500, 0x00004F00, 0x0000A800,
    0x00006800, 0x00006B00, 0x00008100, 0x0000B200, 0x00007100, 0x00006400, 0x0000DA00, 0x00008B00, 0x0000F800, 0x0000EB00, 0x00000F00, 0x00004B00, 0x00007000, 0x00005600, 0x00009D00, 0x00003500,
    0x00001E00, 0x00002400, 0x00000E00, 0x00005E00, 0x00006300, 0x00005800, 0x0000D100, 0x0000A200, 0x00002500, 0x00002200, 0x00007C00, 0x00003B00, 0x00000100, 0x00002100, 0x00007800, 0x00008700,
    0x0000D400, 0x00000000, 0x00004600, 0x00005700, 0x00009F00, 0x0000D300, 0x00002700, 0x00005200, 0x00004C00, 0x00003600, 0x00000200, 0x0000E700, 0x0000A000, 0x0000C400, 0x0000C800, 0x00009E00,
    0x0000EA00, 0x0000BF00, 0x00008A00, 0x0000D200, 0x00004000, 0x0000C700, 0x00003800, 0x0000B500, 0x0000A300, 0x0000F700, 0x0000F200, 0x0000CE00, 0x0000F900, 0x00006100, 0x00001500, 0x0000A100,
    0x0000E000, 0x0000AE00, 0x00005D00, 0x0000A400, 0x00009B00, 0x00003400, 0x00001A00, 0x00005500, 0x0000AD00, 0x00009300, 0x00003200, 0x00003000, 0x0000F500, 0x00008C00, 0x0000B100, 0x0000E300,
    0x00001D00, 0x0000F600, 0x0000E200, 0x00002E00, 0x00008200, 0x00006600, 0x0000CA00, 0x00006000, 0x0000C000, 0x00002900, 0x00002300, 0x0000AB00, 0x00000D00, 0x00005300, 0x00004E00, 0x00006F00,
    0x0000D500, 0x0000DB00, 0x00003700, 0x00004500, 0x0000DE00, 0x0000FD00, 0x00008E00, 0x00002F00, 0x00000300, 0x0000FF00, 0x00006A00, 0x00007200, 0x00006D00, 0x00006C00, 0x00005B00, 0x00005100,
    0x00008D00, 0x00001B00, 0x0000AF00, 0x00009200, 0x0000BB00, 0x0000DD00, 0x0000BC00, 0x00007F00, 0x00001100, 0x0000D900, 0x00005C00, 0x00004100, 0x00001F00, 0x00001000, 0x00005A00, 0x0000D800,
    0x00000A00, 0x0000C100, 0x00003100, 0x00008800, 0x0000A500, 0x0000CD00, 0x00007B00, 0x0000BD00, 0x00002D00, 0x00007400, 0x0000D000, 0x00001200, 0x0000B800, 0x0000E500, 0x0000B400, 0x0000B000,
    0x00008900, 0x00006900, 0x00009700, 0x00004A00, 0x00000C00, 0x00009600, 0x00007700, 0x00007E00, 0x00006500, 0x0000B900, 0x0000F100, 0x00000900, 0x0000C500, 0x00006E00, 0x0000C600, 0x00008400,
    0x00001800, 0x0000F000, 0x00007D00, 0x0000EC00, 0x00003A00, 0x0000DC00, 0x00004D00, 0x00002000, 0x00007900, 0x0000EE00, 0x00005F00, 0x00003E00, 0x0000D700, 0x0000CB00, 0x00003900, 0x00004800
};

static const uint8_t SBOX00[/*256*/] = {
    /*     0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F*/
    /*0*/ 0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2, 0x28, 0xFB, 0x2C, 0x05,
    /*1*/ 0x2B, 0x67, 0x9A, 0x76, 0x2A, 0xBE, 0x04, 0xC3, 0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
    /*2*/ 0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF, 0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62,
    /*3*/ 0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80, 0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6,
    /*4*/ 0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA, 0x83, 0x59, 0x3C, 0x19, 0xE6, 0x85, 0x4F, 0xA8,
    /*5*/ 0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D, 0x35,
    /*6*/ 0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87,
    /*7*/ 0xD4, 0x00, 0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52, 0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E,
    /*8*/ 0xEA, 0xBF, 0x8A, 0xD2, 0x40, 0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1,
    /*9*/ 0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55, 0xAD, 0x93, 0x32, 0x30, 0xF5, 0x8C, 0xB1, 0xE3,
    /*A*/ 0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0xC0, 0x29, 0x23, 0xAB, 0x0D, 0x53, 0x4E, 0x6F,
    /*B*/ 0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C, 0x5B, 0x51,
    /*C*/ 0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8,
    /*D*/ 0x0A, 0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD, 0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0,
    /*E*/ 0x89, 0x69, 0x97, 0x4A, 0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84,
    /*F*/ 0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D, 0x20, 0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48
};

typedef void (*block128_f) (const void *ctx, const unsigned char in[16],
                            unsigned char out[16]);


#define GETDWORD(A)         (((uint32_t)((A)[0]) << 24) | ((uint32_t)((A)[1]) << 16) | ((uint32_t)((A)[2]) << 8) | ((uint32_t)((A)[3])))
#define PUTDWORD(S, A)      (A)[0] = (uint8_t)(((S) >> 24) & 0xFF), (A)[1] = (uint8_t)(((S) >> 16) & 0xFF), (A)[2] = (uint8_t)(((S) >> 8) & 0xFF), (A)[3] = (uint8_t)((S) & 0xFF);

#define RSL(A, I)           (((A) << (I)) | ((A) >> (32 - (I))))

/*LC: Linear Conversion */
#define LC(A)               ((A) ^ (RSL((A), 2)) ^ (RSL((A), 10)) ^ (RSL((A), 18)) ^ (RSL((A), 24)))

/*LCK: Linear Conversion for Key Expend*/
#define LCK(A)              ((A) ^ (RSL((A), 13)) ^ (RSL((A), 23)))

/*NT: Nonlinear Transformation*/
#define NT(A)               ((SBOX24[((A) >> 24)]) | (SBOX16[(((A) >> 16) & 0xFF)]) | (SBOX08[(((A) >> 8) & 0xFF)]) | (SBOX00[((A) & 0xFF)]))

/*RF: Round Function  RF = X0 ^ LC(NT(X1^X2^X3^RK))*/
#define RF_E(X0, X1, X2, X3, X4, RK)            X4 = (X1) ^ (X2) ^ (X3) ^ (RK), X4 = NT(X4), X4 = (X0) ^ ((X4) ^(RSL((X4), 2)) ^ (RSL((X4), 10)) ^ (RSL((X4), 18)) ^ (RSL((X4), 24)))

/*KERF: Key Expend Round Function K[i] = MK[i] ^ FK[i], i = 0 ~ 3; RK[i] = K[i+4] = K[i] ^ LCK(NT(K[i+1]^K[i+2]^[ki+3]^CK[i]))*/
#define KERF_K(K0, K1, K2, K3, K4, CK, RK)      K4 = (K1) ^ (K2) ^ (K3) ^ (CK), K4 = NT(K4), RK = K4 = (K0) ^ ((K4) ^ (RSL((K4), 13)) ^ (RSL((K4), 23)))


static void mbedtls_zeroize( void *v, size_t n )
{
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
}

void sm4_init( sm4_context *ctx )
{
    memset( ctx, 0, sizeof( sm4_context ) );
}

void sm4_free( sm4_context *ctx )
{
    if( ctx == NULL )
        return;

    mbedtls_zeroize( ctx, sizeof( sm4_context ) );
}

int sm4_set_key(sm4_context *ctx, const unsigned char *userKey, size_t length)
{
    uint32_t *rk = ctx->key;
    uint32_t K[5];

    if (length < 16)
        return( 1 );

    K[0] = GETDWORD(userKey) ^ 0xA3B1BAC6;
    K[1] = GETDWORD(userKey + 4) ^ 0x56AA3350;
    K[2] = GETDWORD(userKey + 8) ^ 0x677D9197;
    K[3] = GETDWORD(userKey + 12) ^ 0xB27022DC;

    KERF_K(K[0], K[1], K[2], K[3], K[4], 0x00070E15, rk[0]);
    KERF_K(K[1], K[2], K[3], K[4], K[0], 0x1C232A31, rk[1]);
    KERF_K(K[2], K[3], K[4], K[0], K[1], 0x383F464D, rk[2]);
    KERF_K(K[3], K[4], K[0], K[1], K[2], 0x545B6269, rk[3]);
    KERF_K(K[4], K[0], K[1], K[2], K[3], 0x70777E85, rk[4]);
    KERF_K(K[0], K[1], K[2], K[3], K[4], 0x8C939AA1, rk[5]);
    KERF_K(K[1], K[2], K[3], K[4], K[0], 0xA8AFB6BD, rk[6]);
    KERF_K(K[2], K[3], K[4], K[0], K[1], 0xC4CBD2D9, rk[7]);
    KERF_K(K[3], K[4], K[0], K[1], K[2], 0xE0E7EEF5, rk[8]);
    KERF_K(K[4], K[0], K[1], K[2], K[3], 0xFC030A11, rk[9]);
    KERF_K(K[0], K[1], K[2], K[3], K[4], 0x181F262D, rk[10]);
    KERF_K(K[1], K[2], K[3], K[4], K[0], 0x343B4249, rk[11]);
    KERF_K(K[2], K[3], K[4], K[0], K[1], 0x50575E65, rk[12]);
    KERF_K(K[3], K[4], K[0], K[1], K[2], 0x6C737A81, rk[13]);
    KERF_K(K[4], K[0], K[1], K[2], K[3], 0x888F969D, rk[14]);
    KERF_K(K[0], K[1], K[2], K[3], K[4], 0xA4ABB2B9, rk[15]);
    KERF_K(K[1], K[2], K[3], K[4], K[0], 0xC0C7CED5, rk[16]);
    KERF_K(K[2], K[3], K[4], K[0], K[1], 0xDCE3EAF1, rk[17]);
    KERF_K(K[3], K[4], K[0], K[1], K[2], 0xF8FF060D, rk[18]);
    KERF_K(K[4], K[0], K[1], K[2], K[3], 0x141B2229, rk[19]);
    KERF_K(K[0], K[1], K[2], K[3], K[4], 0x30373E45, rk[20]);
    KERF_K(K[1], K[2], K[3], K[4], K[0], 0x4C535A61, rk[21]);
    KERF_K(K[2], K[3], K[4], K[0], K[1], 0x686F767D, rk[22]);
    KERF_K(K[3], K[4], K[0], K[1], K[2], 0x848B9299, rk[23]);
    KERF_K(K[4], K[0], K[1], K[2], K[3], 0xA0A7AEB5, rk[24]);
    KERF_K(K[0], K[1], K[2], K[3], K[4], 0xBCC3CAD1, rk[25]);
    KERF_K(K[1], K[2], K[3], K[4], K[0], 0xD8DFE6ED, rk[26]);
    KERF_K(K[2], K[3], K[4], K[0], K[1], 0xF4FB0209, rk[27]);
    KERF_K(K[3], K[4], K[0], K[1], K[2], 0x10171E25, rk[28]);
    KERF_K(K[4], K[0], K[1], K[2], K[3], 0x2C333A41, rk[29]);
    KERF_K(K[0], K[1], K[2], K[3], K[4], 0x484F565D, rk[30]);
    KERF_K(K[1], K[2], K[3], K[4], K[0], 0x646B7279, rk[31]);

    return( 0 );
}

void sm4_encrypt(const sm4_context *ctx, const unsigned char *in, unsigned char *out)
{
    const uint32_t *rk = ctx->key;
    uint32_t X[5];

    X[0] = GETDWORD(in);
    X[1] = GETDWORD(in + 4);
    X[2] = GETDWORD(in + 8);
    X[3] = GETDWORD(in + 12);

    RF_E(X[0], X[1], X[2], X[3], X[4], rk[0]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[1]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[2]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[3]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[4]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[5]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[6]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[7]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[8]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[9]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[10]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[11]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[12]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[13]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[14]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[15]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[16]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[17]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[18]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[19]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[20]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[21]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[22]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[23]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[24]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[25]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[26]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[27]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[28]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[29]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[30]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[31]);

    PUTDWORD(X[0], out);
    PUTDWORD(X[4], out + 4);
    PUTDWORD(X[3], out + 8);
    PUTDWORD(X[2], out + 12);

}

void sm4_decrypt(const sm4_context *ctx, const unsigned char *in, unsigned char *out)
{
    const uint32_t *rk = ctx->key;
    uint32_t X[5];

    X[0] = GETDWORD(in);
    X[1] = GETDWORD(in + 4);
    X[2] = GETDWORD(in + 8);
    X[3] = GETDWORD(in + 12);

    RF_E(X[0], X[1], X[2], X[3], X[4], rk[31]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[30]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[29]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[28]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[27]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[26]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[25]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[24]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[23]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[22]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[21]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[20]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[19]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[18]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[17]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[16]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[15]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[14]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[13]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[12]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[11]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[10]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[9]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[8]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[7]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[6]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[5]);
    RF_E(X[2], X[3], X[4], X[0], X[1], rk[4]);
    RF_E(X[3], X[4], X[0], X[1], X[2], rk[3]);
    RF_E(X[4], X[0], X[1], X[2], X[3], rk[2]);
    RF_E(X[0], X[1], X[2], X[3], X[4], rk[1]);
    RF_E(X[1], X[2], X[3], X[4], X[0], rk[0]);

    PUTDWORD(X[0], out);
    PUTDWORD(X[4], out + 4);
    PUTDWORD(X[3], out + 8);
    PUTDWORD(X[2], out + 12);

}

int sm4_crypt_ctr( sm4_context *ctx,
                       size_t length,
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
	int c, i;
    size_t n = *nc_off;

    while( length-- )
    {
        if( n == 0 )
        {
            sm4_encrypt( (const sm4_context*)ctx,(const unsigned char *)nonce_counter, stream_block);
            for( i = 16; i > 0; i-- )
                if( ++nonce_counter[i - 1] != 0 )
                    break;
        }
        c = *input++;
        *output++ = (unsigned char)( c ^ stream_block[n] );

        n = ( n + 1 ) & 0x0F;
    }

    *nc_off = n;

	return 0;
}


int sm4_crypt_ecb(const sm4_context *ctx,const unsigned char *in, unsigned char *out, size_t length, const int enc)
{
	unsigned long i;

	if (enc)
	{
		for(i = 0; i < length/16; i++)
		{
			sm4_encrypt( (const sm4_context*)ctx,(const unsigned char*)(in+i*16),out+i*16);
		}
	}
	else
	{
		for(i = 0; i < length/16; i++)
		{
			sm4_decrypt( (const sm4_context*)ctx,(const unsigned char*)(in+i*16),out+i*16);
		}
	}
	return 0;
}
